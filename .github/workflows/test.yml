name: CI + Release (Strict, SemVer, Changelog, Multi-asset, No set-output, Safe w/ empty repo)

on:
  push:
    branches: [ "main" ]
    tags:
      - "v*.*.*"          # tag push -> release
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      release_enable:
        description: "수동 실행 시 릴리스 생성 (true/false)"
        required: true
        default: "false"
      prerelease:
        description: "프리릴리스 표시 (true/false)"
        required: true
        default: "false"
      generate_notes:
        description: "GitHub 자동 릴리스 노트 병행 (true/false)"
        required: true
        default: "true"
      force_version:
        description: "강제 버전(예: 1.4.0) — 비우면 자동 SemVer(vX.Y.Z)"
        required: false
        default: ""
      extra_assets:
        description: "추가 업로드 글롭(세미콜론 구분, 예: dist/*.tar.gz;bin/*.zip)"
        required: false
        default: ""

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0   # tag/히스토리 전체 필요

      - name: Bootstrap retry helper
        shell: bash
        run: |
          set -Eeuo pipefail
          cat > .retry.sh << 'EOS'
          #!/usr/bin/env bash
          set -Eeuo pipefail
          max="$1"; shift; sleep_s="$1"; shift; n=0
          until "$@"; do
            n=$((n+1))
            if [ "$n" -ge "$max" ]; then
              echo "[RETRY] give up: $*"; exit 1
            fi
            echo "[RETRY] $n/$max failed: $* — sleep ${sleep_s}s"; sleep "$sleep_s"
          done
          EOS
          chmod +x .retry.sh

      - name: Hello
        run: echo Hello, world!

      - name: Build placeholder (replace with real build)
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      - name: Make default release bundle
        run: |
          set -Eeuo pipefail
          mkdir -p release
          if git rev-parse --verify HEAD >/dev/null 2>&1; then
            git rev-parse --short HEAD > release/COMMIT.txt
          else
            echo "EMPTY-REPO" > release/COMMIT.txt
          fi
          zip -r release/source.zip . -x ".git/*"

      - name: Upload CI artifact
        uses: actions/upload-artifact@v4
        with:
          name: ci-bundle
          path: release/source.zip
          if-no-files-found: error

  prepare_release:
    needs: [build]
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.meta.outputs.should_release }}
      tag:            ${{ steps.meta.outputs.tag }}
      title:          ${{ steps.meta.outputs.title }}
      prerelease:     ${{ steps.meta.outputs.prerelease }}
      generate_notes: ${{ steps.meta.outputs.generate_notes }}
      notes_path:     ${{ steps.notes.outputs.notes_path }}
      artifacts_list: ${{ steps.assets.outputs.artifacts_list }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ✅ 저장소 상태 점검: 커밋/태그 유무 확인 → 빈 저장소에서도 안전 진행
      - name: Inspect repo state
        id: repoinfo
        shell: bash
        run: |
          set -Eeuo pipefail
          commits="0"; tags="0"
          if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
            commits="$(git rev-list --count HEAD 2>/dev/null || echo 0)"
            tags="$(git tag -l | wc -l | tr -d ' ')"
          fi
          echo "commit_count=$commits" >> "$GITHUB_OUTPUT"
          echo "tag_count=$tags" >> "$GITHUB_OUTPUT"

      # ✅ Conventional Commits → SemVer/Changelog (커밋 없으면 스킵하고 기본값 제공)
      - name: Compute next version & changelog (dry run)
        id: semver
        if: ${{ steps.repoinfo.outputs.commit_count != '0' }}
        uses: TriPSs/conventional-changelog-action@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          release-count: 0
          skip-commit: true
          skip-tag: true
          output-file: false
          preset: conventionalcommits

      # ✅ SemVer 매핑 + 빈 저장소 대응(기본 v0.1.0)
      - name: Map semver output (safe)
        id: semvermap
        shell: bash
        run: |
          set -Eeuo pipefail
          if [ "${{ steps.repoinfo.outputs.commit_count }}" = "0" ]; then
            echo "next=v0.1.0" >> "$GITHUB_OUTPUT"
            echo "clean_changelog=" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          ver="${{ steps.semver.outputs.version }}"
          if [ -z "$ver" ] || [ "$ver" = "null" ]; then
            echo "::warning::SemVer 계산 실패, fallback v0.1.0"
            echo "next=v0.1.0" >> "$GITHUB_OUTPUT"
          else
            echo "next=v${ver}" >> "$GITHUB_OUTPUT"
          fi
          # TriPSs가 제공하는 깨끗한 변경 로그도 보존(없으면 빈 문자열)
          notes="${{ steps.semver.outputs.clean_changelog }}"
          echo "clean_changelog=${notes}" >> "$GITHUB_OUTPUT"

      # ✅ 릴리스 메타 결정 + main 필터 (tag push/수동 둘 다 안전)
      - name: Decide release metadata (main-only)
        id: meta
        shell: bash
        run: |
          set -Eeuo pipefail
          EVENT="${{ github.event_name }}"
          REF="${{ github.ref }}"
          BR="${{ github.ref_name }}"
          INPUT_ENABLE="${{ github.event.inputs.release_enable || '' }}"
          INPUT_PRE="${{ github.event.inputs.prerelease || 'false' }}"
          INPUT_NOTES="${{ github.event.inputs.generate_notes || 'true' }}"
          FORCE_VER="${{ github.event.inputs.force_version || '' }}"
          SHOULD="false"; TAG=""; TITLE=""

          # main 브랜치 히스토리 확보
          ./.retry.sh 3 5 git fetch origin main --tags

          # 태그 푸시 릴리스: 태그 커밋이 main에 포함되어야 함
          if [[ "$EVENT" == "push" && "$REF" == refs/tags/* ]]; then
            TAG="${REF#refs/tags/}"
            if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
              TAGSHA="$(git rev-list -n1 "$TAG")"
              if git merge-base --is-ancestor "$TAGSHA" origin/main; then
                SHOULD="true"; TITLE="$TAG"
              else
                echo "::error::Tag ${TAG} is not on main history"; exit 1
              fi
            else
              echo "::error::Tag object not found: $TAG"; exit 1
            fi
          fi

          # 수동 릴리스: 오직 main에서만, 버전 규칙(강제 또는 자동)
          if [[ "$EVENT" == "workflow_dispatch" && "${INPUT_ENABLE,,}" == "true" ]]; then
            if [ "$BR" != "main" ]; then
              echo "::error::Manual release is allowed only on main (current: $BR)"; exit 1
            fi
            if [ -n "$FORCE_VER" ]; then
              TAG="v${FORCE_VER}"
            else
              TAG="${{ steps.semvermap.outputs.next }}"
            fi
            SHOULD="true"; TITLE="Release ${TAG}"
          fi

          echo "should_release=$SHOULD"         >> "$GITHUB_OUTPUT"
          echo "tag=$TAG"                       >> "$GITHUB_OUTPUT"
          echo "title=$TITLE"                   >> "$GITHUB_OUTPUT"
          echo "prerelease=$INPUT_PRE"          >> "$GITHUB_OUTPUT"
          echo "generate_notes=$INPUT_NOTES"    >> "$GITHUB_OUTPUT"

      # ✅ 체인지로그 파일(없으면 기본 메시지) — set-output 미사용
      - name: Write changelog to file
        id: notes
        if: ${{ steps.meta.outputs.should_release == 'true' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p release
          notes_input="${{ steps.semvermap.outputs.clean_changelog }}"
          if [ -z "$notes_input" ] || [ "$notes_input" = "null" ]; then
            echo "Automated release for ${{ steps.meta.outputs.tag }}" > release/CHANGELOG.md
          else
            printf "%s\n" "$notes_input" > release/CHANGELOG.md
          fi
          echo "notes_path=release/CHANGELOG.md" >> "$GITHUB_OUTPUT"

      # ✅ 자산 수집(기본 + extra_assets); 매칭 실패 시 실패
      - name: Collect assets list
        id: assets
        if: ${{ steps.meta.outputs.should_release == 'true' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          test -f release/source.zip
          test -f "${{ steps.notes.outputs.notes_path }}"
          LIST="release/source.zip"$'\n'"${{ steps.notes.outputs.notes_path }}"
          EXTRA="${{ github.event.inputs.extra_assets || '' }}"
          IFS=';' read -r -a arr <<< "$EXTRA"
          for g in "${arr[@]}"; do
            [ -z "$g" ] && continue
            matched=""
            for f in $g; do
              if [ -e "$f" ]; then
                LIST+=$'\n'"$f"; matched="yes"
              fi
            done
            if [ -z "$matched" ]; then
              echo "::error::No files matched extra_assets pattern: $g"; exit 1
            fi
          done
          echo "artifacts_list<<EOF" >> "$GITHUB_OUTPUT"
          echo "$LIST" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

  release:
    needs: [prepare_release]
    if: ${{ needs.prepare_release.outputs.should_release == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download CI artifact
        uses: actions/download-artifact@v4
        with:
          name: ci-bundle
          path: release

      - name: Write artifact list to disk
        id: list
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "${{ needs.prepare_release.outputs.artifacts_list }}" > artifacts.txt
          echo "Artifacts to upload:" && cat artifacts.txt

      # 기본 자산 업로드(릴리스 생성/갱신)
      - name: Create/Update GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.prepare_release.outputs.tag }}
          name: ${{ needs.prepare_release.outputs.title }}
          prerelease: ${{ needs.prepare_release.outputs.prerelease }}
          allowUpdates: true
          generateReleaseNotes: ${{ needs.prepare_release.outputs.generate_notes }}
          artifacts: |
            release/source.zip
            release/CHANGELOG.md
          artifactErrorsFailBuild: true

      # 추가 자산 업로드(gh 사용; 실패 시 재시도 후 실패)
      - name: Upload extra assets (loop via gh)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -Eeuo pipefail
          TAG="${{ needs.prepare_release.outputs.tag }}"
          if ! command -v gh >/dev/null 2>&1; then
            echo "::group::Install gh"
            sudo apt-get update
            sudo apt-get install -y gh
            echo "::endgroup::"
          fi
          while IFS= read -r line; do
            [ -z "$line" ] && continue
            [ "$line" = "release/source.zip" ] && continue
            [ "$line" = "release/CHANGELOG.md" ] && continue
            test -e "$line"
            ../../.github/workflows/../.retry.sh 3 5 gh release upload "$TAG" "$line" --clobber
          done < artifacts.txt
